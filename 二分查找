二分查找
#include <bits/stdc++.h>
using namespace std;

// int binaryfind(vector<int> nums, int target)
// {
//     int left = 0;
//     int right = nums.size() - 1;
//     int mid = 0;
//     while (left <= right) {
//         mid = left + ((right - left) >> 1);
//         if (nums[mid] == target) {
//             mid = right - 1;
//         }
//         else if (nums[mid] > target) {
//             right = mid - 1;
//         }
//         else if(nums[mid] < target) {
//             left = mid + 1;
//         }
//     }
//     if (left < nums.size() || nums[left] != target)
//         return -1;
//     return left;
// }

// 查找左侧区间
// int binaryfind(int *nums, int len, int target)
// {
//     int left = 0;
//     int right = len;
//     int mid = 0;
//     while (left < right) {
//         mid = left + (right - left) >> 1;
//         if (nums[mid] == target) {
//             right = mid;
//         }
//         else if (nums[mid] > target) {
//             right = mid;
//         }
//         else if (nums[mid] < target) {
//             left = mid + 1;
//         }
//     }

//     if (left == len || nums[left] != target)
//         return -1;
//     return left;
// }

// int binaryfindleft(vector<int> &nums, int target)
// {
//     int left = 0;
//     int right = nums.size();
//     int mid = 0;
//     while (left < right) {
//         mid = left + ((right - left) >> 1);
//         if (nums[mid] == target)
//             right = mid;
//         else if (nums[mid] > target)
//             right = mid;
//         else if (nums[mid] < target)
//             left = mid + 1;
//     }

//     if (left == nums.size() || nums[left] != target)
//         return -1;
//     return left;
// }

// // 搜索算法验证OK
// // 选择找到右边区间
// int binaryfindright(vector<int> &nums, int target)
// {
//     int left = 0;
//     int right = nums.size();
//     int mid = 0;
//     while (left < right) {
// 		mid = left + ((right - left) >> 1);
//         if (nums[mid] == target)
//             left = mid + 1;
//         else if (nums[mid] < target)
//             left = mid + 1;
//         else if (nums[mid] > target)
//             right = mid;
//     }
//     if (left == 0 || nums[left - 1] != target)
//         return -1;
//     return left - 1;
// }

int binaryfindleft(vector<int> &nums, int target)
{
    int left = 0;
    int right = nums.size();
    int mid = 0;
    while (left < right) {
        mid = left + ((right - left) >> 1);
        if (nums[mid] == target)
            right = mid;
        else if (nums[mid] > target)
            right = mid;
        else if (nums[mid] < target)
            left = mid + 1;
    }
    
    if (left == nums.size() || nums[left] != target)
        return -1;
    
    return left;
}

int binaryfindright(vector<int> &nums, int target)
{
    int left = 0;
    int right = nums.size();
    int mid = 0;
    while (left < right) {
        mid = left + ((right - left) >> 1);
        if (nums[mid] == target)
            left = mid + 1;
        else if (nums[mid] < target)
            left = mid + 1;
        else if (nums[mid] > target)
            right = mid;
    }

    // 边界条件
    if ((left == 0) || nums[left - 1] != target)
        return -1;
    return left - 1;
}

void test1()
{
    vector<int> nums{0,1,2,2,3,4,2,1,1};
    sort(nums.begin(), nums.end());
	for_each(nums.begin(), nums.end(), [](int a) {cout << a << " ";});
	cout << endl;
    cout << binaryfindleft(nums, 2) << endl;
    // cout << binaryfindright(nums, 3) << endl;
}

int main(int argc, char *argv[])
{
    test1();
    return 0;
}
