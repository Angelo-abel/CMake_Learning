const int N = 110;
bool is_prime[N];
int prime[N];
void sieve(int n)
{
    int count = 0;
    memset(is_prime, 1, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i <= n; i++) {
        if (is_prime[i]) {
            for (int j = 2 * i; j <= n; j += i) {
                is_prime[j] = false;
            }
        }
    }
}

const int N = 10010;
int v[N], prime[N];
int urela_sieve(int n)
{
    int count  = 0;
    for (int i = 2; i <= n; i++) {
        if (!v[i]) v[i] = i, prime[count++] = i;
        for (int j = 0; j < count; j++) {
            if (prime[j] > v[i] || prime[j] > n / i) break;
            // 寻找比当前v[i]是否存在更小的质因子， 同时同时需要满足 prime[j]质数需要满足条件
            v[i * prime[j]] = prime[j];
        }
    }
}


// 使用欧拉筛选法
const int N = 110;
int v[N], prime[N];
int urela_seive(int n)
{
    int cnt = 0;
    for (int i = 2; i <= n; i++) {
        if (!v[i]) v[i] = i, prime[cnt++] = i;
        for (int j = 0; j < cnt; j++) {
            if (prime[j] > v[i] || prime[j] > n / i) break;
            // 更新最小因子
            v[i * prime[j]] = prime[j];
        }
    }
}
